import useAxiosAuth from "@/libs/hooks/useAxiosAuth";
import { usePagination } from "@/libs/hooks/usePagination";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { PaginationState } from "@tanstack/react-table";
import BASE_URL, { GeneralApiResponse, GeneralApiResponsePagination } from "./urls.service";

const prefix = "/agent";

export interface IAgent extends Document {
  // personal details
  _id: string;
  name: string,
  agentCode: string, // to be autogenerated
  brokerName: string,
  companyNmae: string,
  contactPerson: string,
  addressLine1: string,
  addressLine2: string,
  phone1: string,
  mobile1: string,
  mobile2: string,
  email: string,
  effectiveDate: Date,
  // personal details

  // account details 
  bankName: string,
  accountNumber: string,
  branch: string,
  ifscCode: string,
  gstNumber: string,
  remark: string,
  // account details 
  status: boolean,
  createdAt: Date;
  updateAt: Date;
}

export interface IAgentSelect {
  label: string;
  value: string;
}

export const useAgentsApiHook = () => {
  const axiosAuth = useAxiosAuth();

  const addAgents = async (obj: any,) => {

    return axiosAuth.post<GeneralApiResponse>(`${BASE_URL}${prefix}/`, obj);
  };
  const updateAgentsById = async ({ id, obj }: { id: string, obj: any }) => {
    return axiosAuth.patch<GeneralApiResponse>(`${BASE_URL}${prefix}/updateById/${id}`, obj);
  };
  const deleteAgents = async (id: any) => {
    return axiosAuth.delete<GeneralApiResponse>(`${BASE_URL}${prefix}/deleteById/${id}`);
  };
  const getAgentsById = async (id: any) => {
    return axiosAuth.get<GeneralApiResponse<IAgent>>(`${BASE_URL}${prefix}/getById/${id}`);
  };
  const getAgentsForSelect = async (pagination: PaginationState, searchObj: any) => {
    const query = new URLSearchParams({
      pageIndex: String(pagination.pageIndex),
      pageSize: String(pagination.pageSize),
      ...searchObj,
    }).toString();
    return axiosAuth.get<GeneralApiResponse<IAgentSelect | any>>(`${BASE_URL}${prefix}/getAgentsForSelectInput/?${query}`);
  };

  const getAllAgents = async (pagination: PaginationState, searchObj: any) => {
    const query = new URLSearchParams({
      pageIndex: String(pagination.pageIndex),
      pageSize: String(pagination.pageSize),
      ...searchObj,
    }).toString();
    return axiosAuth.get<GeneralApiResponsePagination<IAgent>>(`${BASE_URL}${prefix}/?${query}`);
  };

  const addNewAccountDocumentVersion = async (obj: any) => {
    return axiosAuth.post<GeneralApiResponse>(`${BASE_URL}${prefix}/addNewAccountDocumentVersion`, obj)
  }


  return {
    addAgents,
    updateAgentsById,
    deleteAgents,
    getAgentsById,
    getAllAgents,
    getAgentsForSelect,
    addNewAccountDocumentVersion
  };
};

export const useAddAgents = () => {

  const queryClient = useQueryClient();
  const api = useAgentsApiHook()
  return useMutation({
    mutationFn: api.addAgents,
    onSuccess: (res) => {
      queryClient.invalidateQueries({ queryKey: ["Agents"] });
      // toastSuccess(res);
    },
  });
};

export const useAgentsById = (id: string) => {
  const api = useAgentsApiHook()

  return useQuery({
    queryKey: ["Agents_id", id],
    queryFn: () => api.getAgentsById(id).then((res) => res.data),
    enabled: !!id,
  });
};

export const useAgents = (searchObj: Record<string, any> = {}, getPaginationFromParams = true) => {

  const pagination = usePagination(getPaginationFromParams);

  const api = useAgentsApiHook()

  return useQuery({
    queryKey: ["Agents", pagination, searchObj],
    queryFn: () => api.getAllAgents(pagination, searchObj).then((res) => res?.data),
    initialData: {
      data: [],
      total: 0,
      message: "",
    } as unknown as GeneralApiResponsePagination<IAgent>,
  });
};

export const useInspirationForSelect = (searchObj: Record<string, any> = {}, getPaginationFromParams = true) => {

  const pagination = usePagination(getPaginationFromParams);

  const api = useAgentsApiHook()

  return useQuery({
    queryKey: ["Agents", pagination, searchObj],
    queryFn: () => api.getAgentsForSelect(pagination, searchObj).then((res) => res?.data),
  });
};

export const useDeleteAgents = () => {
  const api = useAgentsApiHook()

  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: api.deleteAgents,
    onSuccess: (res) => {
      queryClient.invalidateQueries({ queryKey: ["Agents"] });
      // toastSuccess(res);
    },
  });
};

export const useUpdateAgents = () => {
  const api = useAgentsApiHook()

  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: api.updateAgentsById,
    onSuccess: (res) => {
      queryClient.invalidateQueries({ queryKey: ["Agents"] });
      // toastSuccess(res);
    },
  });
};

export const useAccountNewVersionAdd = () => {
  const api = useAgentsApiHook()

  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: api.addNewAccountDocumentVersion,
    onSuccess: (res) => {
      queryClient.invalidateQueries({ queryKey: ["Agents"] });
      // toastSuccess(res);
    },
  });
};

